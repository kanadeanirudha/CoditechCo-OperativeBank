@model BankFixedDepositAccountViewModel
@{
    ViewBag.Title = Model.BankFixedDepositAccountId > 0 ? "Update Bank Fixed Deposit Account" : "Add Bank Fixed Deposit Account";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    DropdownViewModel centreDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.AccessibleCentre.ToString(), DropdownName = "SelectedCentreCode", DropdownSelectedValue = Model.SelectedCentreCode, ChangeEvent = "BankSavingsAccount.GetBankMemberByCentreCode()", IsDisabled = Model.BankFixedDepositAccountId > 0 };
    DropdownViewModel bankMemberDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.BankMembers.ToString(), DropdownName = "BankMemberId", DropdownSelectedValue = Model.BankMemberId.ToString(), Parameter = Model.SelectedCentreCode, IsCustomDropdown = true, IsDisabled = Model.BankFixedDepositAccountId > 0 };
    DropdownViewModel bankMemberNomineeDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.BankMemberNominee.ToString(), DropdownName = "BankMemberNomineeId", DropdownSelectedValue = Model.BankMemberNomineeId.ToString(), Parameter = Model.BankMemberNomineeId.ToString(), IsCustomDropdown = true };
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                @if (Model.BankFixedDepositAccountId > 0)
                                {
                                    <h4 class="card-title">Update Bank Fixed Deposit Account</h4>
                                }
                                else
                                {
                                    <h4 class="card-title">Create Bank Fixed Deposit Account</h4>
                                }
                            </div><!--end col-->
                        </div>  <!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.HiddenFor(m => m.BankFixedDepositAccountId)
                            @if (Model.BankFixedDepositAccountId > 0)
                            {
                                @Html.HiddenFor(m => m.SelectedCentreCode)
                                @Html.HiddenFor(m => m.BankMemberId)
                                @Html.HiddenFor(m => m.BankMemberNomineeId)
                            }
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.SelectedCentreCode, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", centreDropdown)
                                        @Html.ValidationMessageFor(x => x.SelectedCentreCode)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.BankMemberId, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", bankMemberDropdown)
                                        @Html.ValidationMessageFor(x => x.BankMemberId)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.BankMemberNomineeId, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", bankMemberNomineeDropdown)
                                        @Html.ValidationMessageFor(x => x.BankMemberNomineeId)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.FixedDepositAccountNumber, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.FixedDepositAccountNumber, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.FixedDepositAccountNumber)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.DepositAmount, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.TextBoxFor(x => x.DepositAmount, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.DepositAmount)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.InterestRate, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.TextBoxFor(x => x.InterestRate, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.InterestRate)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.StartDate, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.StartDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.StartDate)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.TenureMonths, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.TextBoxFor(x => x.TenureMonths, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.TenureMonths)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MaturityDate, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.MaturityDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.MaturityDate)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.AccountStatus, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
                               {
                                   DropdownSelectedValue = Model.AccountStatusEnumId.ToString(),
                                   DropdownName = "AccountStatusEnumId",
                                   GroupCode = DropdownCustomTypeEnum.AccountStatus.ToString(),
                                   IsRequired = true,
                               })
                                        @Html.ValidationMessageFor(x => x.AccountStatusEnumId)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.InterestType, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
                               {
                                   DropdownSelectedValue = Model.InterestTypeEnumId.ToString(),
                                   DropdownName = "InterestTypeEnumId",
                                   GroupCode = DropdownCustomTypeEnum.InterestType.ToString(),
                                   IsRequired = true,
                               })
                                        @Html.ValidationMessageFor(x => x.InterestTypeEnumId)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.InterestPayout, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
                               {
                                   DropdownSelectedValue = Model.InterestPayoutEnumId.ToString(),
                                   DropdownName = "InterestPayoutEnumId",
                                   GroupCode = DropdownCustomTypeEnum.InterestPayout.ToString(),
                                   IsRequired = true,
                               })
                                        @Html.ValidationMessageFor(x => x.InterestPayoutEnumId)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MaturityAmount, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.TextBoxFor(x => x.MaturityAmount, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.MaturityAmount)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.ClosureDate, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.ClosureDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.ClosureDate)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PrematurePenalty, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.TextBoxFor(x => x.PrematurePenalty, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PrematurePenalty)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.Remarks, new { @class = "form-label required" })
                                        @Html.TextAreaFor(x => x.Remarks, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.Remarks)
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- jQuery already included -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- jQuery UI CSS -->
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">

<!-- jQuery UI JS -->
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
@section scripts {
    <script src="~/js/coditech/CoOperativeBank/BankSavingsAccount.js"></script>
    <script type="text/javascript">
        $(function () {
            function initSimpleDatepicker(selector) {
                const today = new Date();
                const minDate = new Date(today.getFullYear() - 2, 0, 1); // Jan 1, two years ago
                const maxDate = new Date(today.getFullYear() + 2, 11, 31); // Dec 31, two years ahead

                $(selector).datepicker({
                    changeMonth: true,
                    changeYear: true,
                    dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()",
                    showButtonPanel: true,
                    autoSize: true,
                    closeText: "Clear",
                    currentText: "Today",
                    yearRange: "-2:+2",
                    minDate: minDate,
                    maxDate: maxDate,
                    beforeShow: function (input, inst) {
                        setTimeout(function () {
                            var buttonPane = $(inst.dpDiv).find(".ui-datepicker-buttonpane");
                            buttonPane.find(".ui-datepicker-current").off("click").on("click", function () {
                                var today = new Date();
                                $(selector).datepicker("setDate", today);
                                $(selector).change(); // Optional: trigger change event
                            });
                        }, 1);
                    },
                    onClose: function () {
                        if ($(window.event?.srcElement).hasClass("ui-datepicker-close")) {
                            $(this).val(""); // Clear the input
                        }
                    }
                }).addClass("datepicker");
            }

            // Initialize all datepickers
            initSimpleDatepicker("#StartDate");
            initSimpleDatepicker("#MaturityDate");
            initSimpleDatepicker("#ClosureDate");
        });
    </script>
}
