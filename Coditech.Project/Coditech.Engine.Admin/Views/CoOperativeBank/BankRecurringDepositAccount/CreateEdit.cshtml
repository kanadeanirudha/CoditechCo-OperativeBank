@model BankRecurringDepositAccountViewModel
@{
	ViewBag.Title = Model.BankRecurringDepositAccountId > 0 ? "Update Recurring Deposit Account" : "Add Recurring Deposit Account";
	string controllerName = ViewContext.RouteData.Values["controller"].ToString();
	string actionName = ViewContext.RouteData.Values["action"].ToString();
	DropdownViewModel centreDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.AccessibleCentre.ToString(), DropdownName = "CentreCode", DropdownSelectedValue = Model.CentreCode, ChangeEvent = "BankRecurringDepositAccount.GetBankMemberByCentreCode();BankRecurringDepositAccount.GetBankProductByCentreCode();" };
	DropdownViewModel bankMemberByCentreCodeDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.BankMembers.ToString(), DropdownName = "BankMemberId", DropdownSelectedValue = Model.BankMemberId.ToString(), Parameter = Model.CentreCode, IsCustomDropdown = true };
	DropdownViewModel bankProductByCentreCodeDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.BankProduct.ToString(), DropdownName = "BankProductId", DropdownSelectedValue = Model.BankProductId.ToString(), Parameter = Model.CentreCode, IsCustomDropdown = true };
	DropdownViewModel bankMemberNomineeDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.BankMemberNominee.ToString(), DropdownName = "BankMemberNomineeId", DropdownSelectedValue = Model.BankMemberNomineeId.ToString(), Parameter = Model.BankMemberNomineeId.ToString(), IsCustomDropdown = true };

}
<!-- Page Content-->
<div class="page-content mt-5">
	<div class="container-fluid">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<div class="row align-items-center">
							<div class="col">
								@if (Model.BankRecurringDepositAccountId > 0)
								{
									<h4 class="card-title">Update Recurring Deposit Account</h4>
								}
								else
								{
									<h4 class="card-title">Create Recurring Deposit Account</h4>
								}
							</div><!--end col-->
						</div>  <!--end row-->
					</div>
					<div class="card-body">
						@using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
						{
							@Html.HiddenFor(m => m.BankRecurringDepositAccountId)
							@if (Model.BankRecurringDepositAccountId > 0)
							{
								@Html.HiddenFor(m => m.CentreCode)
								@Html.HiddenFor(m => m.BankMemberId)
								@Html.HiddenFor(m => m.BankProductId)
								@Html.HiddenFor(m => m.BankMemberNomineeId)
								@Html.HiddenFor(m => m.AccountStatusEnumId)
							}
							<div class="row">
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.CentreCode, new { @class = "form-label required" })
										@Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", centreDropdown)
										@Html.ValidationMessageFor(x => x.CentreCode)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.BankProductId, new { @class = "form-label required" })
										@Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", bankProductByCentreCodeDropdown)
										@Html.ValidationMessageFor(x => x.BankProductId)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.BankMemberId, new { @class = "form-label required" })
										@Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", bankMemberByCentreCodeDropdown)
										@Html.ValidationMessageFor(x => x.BankMemberId)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.BankMemberNomineeId, new { @class = "form-label required" })
										@Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", bankMemberNomineeDropdown)
										@Html.ValidationMessageFor(x => x.BankMemberNomineeId)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.AccountNumber, new { @class = "form-label required", @onkeypress = "return CoditechCommon.ValidNumeric()" })
										@Html.TextBoxFor(x => x.AccountNumber, new { @class = "form-control" })
										@Html.ValidationMessageFor(x => x.AccountNumber)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.MonthlyInstallment, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
										@Html.TextBoxFor(x => x.MonthlyInstallment, new { @class = "form-control" })
										@Html.ValidationMessageFor(x => x.MonthlyInstallment)
									</div>
								</div>

								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.StartDate, new { @class = "form-label required" })
										@Html.TextBoxFor(x => x.StartDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control datepicker", @readonly = "true" })
										@Html.ValidationMessageFor(x => x.StartDate)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.DurationMonths, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
										@Html.TextBoxFor(x => x.DurationMonths, new { @class = "form-control" })
										@Html.ValidationMessageFor(x => x.DurationMonths)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.InterestRate, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
										@Html.TextBoxFor(x => x.InterestRate, new { @class = "form-control" })
										@Html.ValidationMessageFor(x => x.InterestRate)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.MaturityAmount, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
										@Html.TextBoxFor(x => x.MaturityAmount, new { @class = "form-control" })
										@Html.ValidationMessageFor(x => x.MaturityAmount)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.MaturityDate, new { @class = "form-label required", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
										@Html.TextBoxFor(x => x.MaturityDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control datepicker", @readonly = "true" })
										@Html.ValidationMessageFor(x => x.MaturityDate)
									</div>
								</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.InterestType, new { @class = "form-label required" })
										@Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
										{
											DropdownSelectedValue = Model.InterestTypeEnumId.ToString(),
																		DropdownName = "InterestTypeEnumId",
																		GroupCode = DropdownCustomTypeEnum.InterestType.ToString(),
																		IsDisabled = Model.InterestTypeEnumId > 0,
																		IsRequired = true,
																		})
									@Html.ValidationMessageFor(x => x.InterestTypeEnumId)
								</div>
							</div>
								<div class="col-lg-4">
									<div class="mb-3">
										@Html.LabelFor(x => x.AccountStatus, new { @class = "form-label required" })
										@Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", new DropdownViewModel()
										{
											DropdownSelectedValue = Model.AccountStatusEnumId.ToString(),
																		DropdownName = "AccountStatusEnumId",
																		GroupCode = DropdownCustomTypeEnum.AccountStatus.ToString(),
																		IsDisabled = Model.AccountStatusEnumId > 0,
																		IsRequired = true,
																		})
									@Html.ValidationMessageFor(x => x.AccountStatusEnumId)
								</div>
							</div>
							<div class="col-lg-4">
								<div class="mb-3">
									@Html.LabelFor(x => x.ClosureDate, new { @class = "form-label" })
									@Html.TextBoxFor(x => x.ClosureDate, AdminGeneralHelper.DateFormatForTextBox(), new { @class = "form-control datepicker", @readonly = "true" })
									@Html.ValidationMessageFor(x => x.ClosureDate)
								</div>
							</div>
							<div class="col-lg-4">
								<div class="mb-3">
									@Html.LabelFor(x => x.PrematurePenalty, new { @class = "form-label" })
									@Html.TextAreaFor(x => x.PrematurePenalty, new { @class = "form-control" })
									@Html.ValidationMessageFor(x => x.PrematurePenalty)
								</div>
							</div>
							<div class="col-lg-4">
								<div class="mb-3">
									@Html.LabelFor(x => x.Remarks, new { @class = "form-label" })
									@Html.TextAreaFor(x => x.Remarks, new { @class = "form-control" })
									@Html.ValidationMessageFor(x => x.Remarks)
								</div>
							</div>

						</div>
						<button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
						<a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
												}
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@section Scripts {
	<script src="~/js/coditech/CoOperativeBank/BankRecurringDepositAccount.js"></script>
	<script src="~/js/coditech/CoOperativeBank/BankRecurringDepositAccount.js"></script>
	<script type="text/javascript">
		$(function () {
			$(".datepicker").datepicker({
				changeMonth: true,
				changeYear: true,
				dateFormat: "@AdminGeneralHelper.DateFormatForCalendar()",
				minDate: 0,
				yearRange: "2022:2028",
				language: "en",
				autoSize: true,
				onSelect: function () {
					var dateDate = $(this).datepicker('getDate');
					console.log("Date selected:", dateDate);
				}
			});
		});
	</script>
}



