@model BankSetupPropertyValuersViewModel
@{
    ViewBag.Title = Model.BankSetupPropertyValuersId > 0 ? "Update Property Type" : "Add Property Type";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    DropdownViewModel generalPersonAddressDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.Address.ToString(), DropdownName = "GeneralPersonAddressId", DropdownSelectedValue = Model.GeneralPersonAddressId.ToString() };
    DropdownViewModel countryDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Country.ToString(), DropdownName = "GeneralCountryMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetRegionListByCountryId('{Model.AddressTypeEnum}')", ClassName = $"GeneralCountryMasterId_{Model.AddressTypeEnum}" };
    DropdownViewModel regionDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Region.ToString(), DropdownName = "GeneralRegionMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralRegionMasterId), Parameter = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetCityListByRegionId('{Model.AddressTypeEnum}')", ClassName = $"GeneralRegionMasterId_{Model.AddressTypeEnum}" };
    DropdownViewModel cityDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.City.ToString(), DropdownName = "GeneralCityMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCityMasterId), Parameter = Convert.ToString(Model.GeneralRegionMasterId), ClassName = $"GeneralCityMasterId_{Model.AddressTypeEnum}" };
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                @if (Model.BankSetupPropertyValuersId > 0)
                                {
                                    <h4 class="card-title">Update Property Valuers</h4>
                                }
                                else
                                {
                                    <h4 class="card-title">Create Property Valuers</h4>
                                }
                            </div><!--end col-->
                        </div>  <!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.BankSetupPropertyValuersId)
                            @Html.HiddenFor(m => m.GeneralPersonAddressId)
                            @Html.HiddenFor(m => m.AddressTypeEnum)
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.FirstName, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                                        @Html.ValidationMessageFor(x => x.FirstName)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MiddleName, new { @class = "form-label" })
                                        @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.LastName, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                                        @Html.ValidationMessageFor(x => x.LastName)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.EmailAddress, new { @class = "form-label" })
                                        @Html.TextBoxFor(x => x.EmailAddress, new { @class = "form-control", @onkeypress = "return CoditechCommon.AvoidSpacing()" })
                                        @Html.ValidationMessageFor(x => x.EmailAddress)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.PhoneNumber, new { @class = "form-label" })
                                        @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.PhoneNumber)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MobileNumber, new { @class = "form-label" })
                                        @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control", type = "number" })
                                        @Html.ValidationMessageFor(x => x.MobileNumber)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.AddressLine1, new { @class = "form-label required" })
                                        @Html.TextAreaFor(x => x.AddressLine1, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.AddressLine1)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.AddressLine2, new { @class = "form-label" })
                                        @Html.TextAreaFor(x => x.AddressLine2, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.AddressLine2)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.GeneralCountryMasterId, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", countryDropdown)
                                        @Html.ValidationMessageFor(x => x.GeneralCountryMasterId, null, new { id = $"errorGeneralCountryMasterId_{Model.AddressTypeEnum}" })
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.GeneralRegionMasterId, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", regionDropdown)
                                        @Html.ValidationMessageFor(x => x.GeneralRegionMasterId, null, new { id = $"errorGeneralRegionMasterId_{Model.AddressTypeEnum}" })
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.GeneralCityMasterId, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", cityDropdown)
                                        @Html.ValidationMessageFor(x => x.GeneralCityMasterId, null, new { id = $"errorGeneralCityMasterId_{Model.AddressTypeEnum}" })
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.Postalcode, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.Postalcode, new { @class = "form-control", @onkeypress = "return CoditechCommon.ValidNumeric()" })
                                        @Html.ValidationMessageFor(x => x.Postalcode)
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>






@* @using Coditech.Admin.Utilities;
@model GeneralPersonAddressListViewModel
@{
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = "Person Address";
    Dictionary<string, string> keyValuePairs = new Dictionary<string, string>();
    keyValuePairs.Add("BankSetupPropertyValuersId", Model.EntityId.ToString());
    keyValuePairs.Add("PersonId", Model.PersonId.ToString());
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div id="generalPersonAddressDivId"></div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/layout/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        User.GetGeneralPersonAddressess(@Model.PersonId, @Model.EntityId, '@Model.EntityType', '@controllerName');
    });
</script>
 *@





@* @using Coditech.Admin.Utilities;
@model BankSetupPropertyValuersListViewModel
@{
    ViewBag.Title = Model.BankSetupPropertyValuersId > 0 ? "Update Bank Setup Property Valuers" : "Add Bank Setup Property Valuers";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    //Dictionary<string, string> keyValuePairs = new Dictionary<string, string>();
    // keyValuePairs.Add("EmployeeId", Model.EntityId.ToString());
    //keyValuePairs.Add("PersonId", Model.PersonId.ToString());
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div id="generalPersonAddressDivId"></div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/layout/jquery.min.js"></script>
@* <script src="~/js/Coditech/CoOperativeBank/BankSetupPropertyValuers.js"></script> *@
@* <script>
    $(document).ready(function () {
        BankSetupPropertyValuers.GetGeneralPersonAddressess(@Model.GeneralPersonAddressId);
    });
</script>  *@




@* 
@model BankSetupPropertyValuersViewModel
@{
    Layout = null;
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    DropdownViewModel countryDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Country.ToString(), DropdownName = "GeneralCountryMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetRegionListByCountryId('{Model.AddressTypeEnum}')", ClassName = $"GeneralCountryMasterId_{Model.AddressTypeEnum}" };
    DropdownViewModel regionDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.Region.ToString(), DropdownName = "GeneralRegionMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralRegionMasterId), Parameter = Convert.ToString(Model.GeneralCountryMasterId), ChangeEvent = $"User.GetCityListByRegionId('{Model.AddressTypeEnum}')", ClassName = $"GeneralRegionMasterId_{Model.AddressTypeEnum}" };
    DropdownViewModel cityDropdown = new DropdownViewModel() { DropdownType = DropdownTypeEnum.City.ToString(), DropdownName = "GeneralCityMasterId", DropdownSelectedValue = Convert.ToString(Model.GeneralCityMasterId), Parameter = Convert.ToString(Model.GeneralRegionMasterId), ClassName = $"GeneralCityMasterId_{Model.AddressTypeEnum}" };
}
@using (Html.BeginForm(actionName, controllerName, FormMethod.Post, new { id = $"frmGeneralPersonalAddress_{Model.AddressTypeEnum}" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.GeneralPersonAddressId)
    @Html.HiddenFor(m => m.PersonId)
    @Html.HiddenFor(m => m.AddressTypeEnum)
    @Html.HiddenFor(m => m.EntityId)
    @Html.HiddenFor(m => m.EntityType)
    <div class="row">
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.FirstName, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                @Html.ValidationMessageFor(x => x.FirstName)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.MiddleName, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.LastName, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.LastName, new { @class = "form-control", @onkeypress = "return CoditechCommon.AllowOnlyAlphabetWithouSpacing()" })
                @Html.ValidationMessageFor(x => x.LastName)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.EmailAddress, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.EmailAddress, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.EmailAddress)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.PhoneNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.PhoneNumber)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.MobileNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.MobileNumber)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.AddressLine1, new { @class = "form-label required" })
                @Html.TextAreaFor(x => x.AddressLine1, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AddressLine1)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.AddressLine2, new { @class = "form-label" })
                @Html.TextAreaFor(x => x.AddressLine2, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.AddressLine2)
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralCountryMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", countryDropdown)
                @Html.ValidationMessageFor(x => x.GeneralCountryMasterId, null, new { id = $"errorGeneralCountryMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralRegionMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", regionDropdown)
                @Html.ValidationMessageFor(x => x.GeneralRegionMasterId, null, new { id = $"errorGeneralRegionMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.GeneralCityMasterId, new { @class = "form-label required" })
                @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", cityDropdown)
                @Html.ValidationMessageFor(x => x.GeneralCityMasterId, null, new { id = $"errorGeneralCityMasterId_{Model.AddressTypeEnum}" })
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                @Html.LabelFor(x => x.Postalcode, new { @class = "form-label required" })
                @Html.TextBoxFor(x => x.Postalcode, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Postalcode)
            </div>
        </div>
        @if (Model.AddressTypeEnum == AddressTypeEnum.PermanentAddress.ToString())
        {
            <div class="col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(x => x.IsCorrespondanceAddressSameAsPermanentAddress, new { @class = "form-label" })
                    <div class="form-check">
                        @Html.CheckBoxFor(x => x.IsCorrespondanceAddressSameAsPermanentAddress, new { @class = "form-check-input" })
                    </div>
                </div>
            </div>
        }
        @if (Model.AddressTypeEnum == AddressTypeEnum.BusinessAddress.ToString())
        {
            <div class="col-lg-4">
                <div class="mb-3">
                    @Html.LabelFor(x => x.CompanyName, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.CompanyName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.CompanyName)
                </div>
            </div>
        }
    </div>
    <button type="submit" id="saveDraft_@Model.AddressTypeEnum" class="btn btn-success" data-test-selector="linkSave" onclick="User.SaveGeneralPersonalAddress('@Model.AddressTypeEnum'); return false;">
        @AdminResources.LabelSave
    </button>
}
 *@

@* @model BankSetupPropertyValuersViewModel
@{
    ViewBag.Title = Model.BankSetupPropertyValuersId > 0 ? "Update Property Type" : "Add Property Type";
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    DropdownViewModel generalPersonAddressDropdown = new DropdownViewModel() { DropdownType = DropdownCustomTypeEnum.Address.ToString(), DropdownName = "GeneralPersonAddressId", DropdownSelectedValue = Model.GeneralPersonAddressId.ToString() };
}
<!-- Page Content-->
<div class="page-content mt-5">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                @if (Model.BankSetupPropertyValuersId > 0)
                                {
                                    <h4 class="card-title">Update Property Valuers</h4>
                                }
                                else
                                {
                                    <h4 class="card-title">Create Property Valuers</h4>
                                }
                            </div><!--end col-->
                        </div>  <!--end row-->
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm(actionName, controllerName, FormMethod.Post))
                        {
                            @Html.HiddenFor(m => m.GeneralPersonAddressId)
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.FirstName, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.FirstName)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.LastName, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.LastName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.LastName)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MiddleName, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.MiddleName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.MiddleName)
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.MobileNumber, new { @class = "form-label required" })
                                        @Html.TextBoxFor(x => x.MobileNumber, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(x => x.MobileNumber)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="mb-3">
                                        @Html.LabelFor(x => x.GeneralPersonAddressId, new { @class = "form-label required" })
                                        @Html.Partial("~/Views/Shared/Control/_DropdownList.cshtml", generalPersonAddressDropdown)
                                        @Html.ValidationMessageFor(x => x.GeneralPersonAddressId)
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success">@AdminResources.LabelSave</button>
                            <a href="../@controllerName/List" class="btn btn-secondary"><i class="ft-x"></i>@AdminResources.LabelCancel</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
 *@